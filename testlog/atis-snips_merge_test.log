nohup: 忽略输入
cuda available: True
cuDNN available: True
gpu numbers: 4
{'cuda': 1, 'bert_path': 'bert_model/bert-base-uncased', 'bert_lr': 2e-05, 'weight_decay': 0.0001, 'lr': 0.0001, 'batch_size': 8, 'val_batch_size': 32, 'test_batch_size': 32, 'n_sample': 0, 'tgt_dm': 'AddToPlaylist', 'epoch': 30, 'patient': 5, 'src': 'atis', 'tgt': 'snips', 'tr': False, 'cl': True, 'cl_temperature': 0.5, 'cl_type': 'euclidean', 'ft': False, 'alpha': 2.0, 'beta': 2.0, 'emb_file': 'data/snips/cache/slu_word_char_embs_with_slotembs.npy', 'emb_dim': 768, 'bio_emb_dim': 10, 'dropout': 0.1, 'hidden_size': 200, 'bidirectional': True, 'num_rnn_layer': 1, 'slot_emb_file': 'data/snips/cache/slot_word_char_embs_based_on_each_domain.pkl', 'freeze_emb': False, 'model_ckpt': 'testlog/snips-atis.ckpt', 'vocab_ckpt': 'testlog/snips-atis_vocab.ckpt'}
set seed: 1314
Namespace(alpha=2.0, batch_size=8, bert_lr=2e-05, bert_path='bert_model/bert-base-uncased', beta=2.0, bidirectional=True, bio_emb_dim=10, cl=True, cl_temperature=0.5, cl_type='euclidean', cuda=1, device=device(type='cuda', index=1), dropout=0.1, emb_dim=768, emb_file='data/snips/cache/slu_word_char_embs_with_slotembs.npy', epoch=30, freeze_emb=False, ft=False, hidden_size=200, lr=0.0001, model_ckpt='testlog/snips-atis.ckpt', n_sample=0, num_rnn_layer=1, patient=5, slot_emb_file='data/snips/cache/slot_word_char_embs_based_on_each_domain.pkl', src='atis', test_batch_size=32, tgt='snips', tgt_dm='AddToPlaylist', tr=False, val_batch_size=32, vocab_ckpt='testlog/snips-atis_vocab.ckpt', weight_decay=0.0001)
0 sentences exceeds 512 tokens
21 sentences with no entities
train data size: 5850
validate data size: 500
test data size: 13984
[('<pad>', 0), ('O', 1), ('B', 2), ('I', 3)]
======domain2slot for source domain: ======
 {'atis_flight': ['[PAD]', 'fromloc.city_name', 'toloc.city_name', 'round_trip', 'arrive_date.month_name', 'arrive_date.day_number', 'stoploc.city_name', 'arrive_time.time_relative', 'arrive_time.time', 'meal_description', 'depart_date.month_name', 'depart_date.day_number', 'airline_name', 'depart_time.period_of_day', 'depart_date.day_name', 'toloc.state_name', 'depart_time.time_relative', 'depart_time.time', 'depart_date.date_relative', 'or', 'class_type', 'fromloc.airport_name', 'flight_mod', 'meal', 'economy', 'city_name', 'airline_code', 'depart_date.today_relative', 'flight_stop', 'toloc.state_code', 'fromloc.state_name', 'toloc.airport_name', 'connect', 'arrive_date.day_name', 'fromloc.state_code', 'arrive_date.today_relative', 'depart_date.year', 'depart_time.start_time', 'depart_time.end_time', 'arrive_time.start_time', 'arrive_time.end_time', 'cost_relative', 'flight_days', 'mod', 'airport_name', 'aircraft_code', 'toloc.country_name', 'toloc.airport_code', 'return_date.date_relative', 'flight_number', 'fromloc.airport_code', 'arrive_time.period_of_day', 'depart_time.period_mod', 'flight_time', 'return_date.day_name', 'fare_amount', 'arrive_date.date_relative', 'arrive_time.period_mod', 'period_of_day', 'stoploc.state_code', 'fare_basis_code', 'stoploc.airport_name', 'return_time.period_mod', 'return_time.period_of_day', 'return_date.today_relative', 'return_date.month_name', 'return_date.day_number', 'compartment', 'day_name', 'airport_code', 'stoploc.airport_code', 'flight'], 'atis_airfare': ['[PAD]', 'round_trip', 'fromloc.city_name', 'toloc.city_name', 'cost_relative', 'fare_amount', 'class_type', 'economy', 'airline_name', 'flight_mod', 'depart_time.time_relative', 'depart_time.time', 'arrive_date.month_name', 'arrive_date.day_number', 'airline_code', 'flight_number', 'stoploc.city_name', 'toloc.airport_name', 'depart_date.date_relative', 'depart_date.day_name', 'depart_date.month_name', 'depart_date.day_number', 'toloc.state_code', 'depart_time.period_of_day', 'flight_stop', 'fromloc.state_name', 'toloc.state_name', 'toloc.airport_code', 'aircraft_code', 'depart_date.year', 'arrive_time.time_relative', 'arrive_time.time', 'fromloc.airport_code', 'fromloc.airport_name', 'depart_date.today_relative', 'return_date.month_name', 'return_date.day_number', 'connect', 'meal', 'arrive_date.date_relative', 'arrive_date.day_name', 'or', 'depart_time.period_mod', 'flight_time', 'flight_days', 'fromloc.state_code'], 'atis_airline': ['[PAD]', 'fromloc.city_name', 'toloc.city_name', 'toloc.state_code', 'mod', 'depart_date.day_name', 'class_type', 'depart_date.today_relative', 'stoploc.city_name', 'aircraft_code', 'arrive_date.month_name', 'arrive_date.day_number', 'toloc.airport_name', 'fromloc.state_code', 'depart_time.period_of_day', 'airline_code', 'flight_number', 'depart_time.time_relative', 'depart_time.time', 'depart_date.month_name', 'depart_date.day_number', 'arrive_time.time', 'city_name', 'airport_name', 'flight_stop', 'arrive_time.period_of_day', 'fromloc.airport_code', 'airline_name', 'depart_date.date_relative', 'connect', 'flight_days', 'round_trip', 'cost_relative', 'fromloc.airport_name', 'depart_time.start_time', 'depart_time.end_time', 'toloc.state_name'], 'atis_ground_service': ['[PAD]', 'toloc.airport_name', 'city_name', 'fromloc.airport_name', 'toloc.city_name', 'state_code', 'transport_type', 'airport_name', 'fromloc.city_name', 'or', 'depart_date.date_relative', 'depart_date.day_name', 'time', 'depart_date.month_name', 'depart_date.day_number', 'today_relative', 'flight_time', 'state_name', 'period_of_day', 'time_relative', 'day_name', 'month_name', 'day_number', 'airport_code'], 'atis_others': ['[PAD]', 'depart_date.day_name', 'flight_stop', 'toloc.state_name', 'depart_time.period_of_day', 'city_name', 'depart_time.time', 'flight_mod', 'depart_date.today_relative', 'airport_name', 'fare_amount', 'toloc.state_code', 'arrive_date.day_number', 'arrive_time.time_relative', 'toloc.city_name', 'depart_time.time_relative', 'depart_date.day_number', 'depart_date.date_relative', 'cost_relative', 'fromloc.airport_name', 'toloc.airport_name', 'mod', 'fromloc.city_name', 'restriction_code', 'fare_basis_code', 'airline_name', 'depart_date.month_name', 'stoploc.city_name', 'arrive_date.day_name', 'fromloc.state_name', 'class_type', 'transport_type', 'aircraft_code', 'meal_description', 'return_date.date_relative', 'arrive_date.month_name', 'flight_time', 'or', 'arrive_time.time', 'economy', 'meal', 'flight_number', 'flight_days', 'state_code', 'toloc.airport_code', 'return_date.day_name', 'fromloc.airport_code', 'airport_code', 'round_trip', 'state_name', 'airline_code'], 'atis_abbreviation': ['[PAD]', 'fare_basis_code', 'airport_code', 'airline_code', 'meal', 'meal_code', 'restriction_code', 'airline_name', 'aircraft_code', 'class_type', 'days_code', 'mod', 'fromloc.city_name', 'toloc.city_name', 'booking_class']}
****** average slots number: 40.833333333333336 ******
======domain2slot for source and target domain: ======
 Some weights of the model checkpoint at bert_model/bert-base-uncased were not used when initializing BertModel: ['cls.seq_relationship.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.bias', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
{'atis_flight': ['[PAD]', 'fromloc.city_name', 'toloc.city_name', 'round_trip', 'arrive_date.month_name', 'arrive_date.day_number', 'stoploc.city_name', 'arrive_time.time_relative', 'arrive_time.time', 'meal_description', 'depart_date.month_name', 'depart_date.day_number', 'airline_name', 'depart_time.period_of_day', 'depart_date.day_name', 'toloc.state_name', 'depart_time.time_relative', 'depart_time.time', 'depart_date.date_relative', 'or', 'class_type', 'fromloc.airport_name', 'flight_mod', 'meal', 'economy', 'city_name', 'airline_code', 'depart_date.today_relative', 'flight_stop', 'toloc.state_code', 'fromloc.state_name', 'toloc.airport_name', 'connect', 'arrive_date.day_name', 'fromloc.state_code', 'arrive_date.today_relative', 'depart_date.year', 'depart_time.start_time', 'depart_time.end_time', 'arrive_time.start_time', 'arrive_time.end_time', 'cost_relative', 'flight_days', 'mod', 'airport_name', 'aircraft_code', 'toloc.country_name', 'toloc.airport_code', 'return_date.date_relative', 'flight_number', 'fromloc.airport_code', 'arrive_time.period_of_day', 'depart_time.period_mod', 'flight_time', 'return_date.day_name', 'fare_amount', 'arrive_date.date_relative', 'arrive_time.period_mod', 'period_of_day', 'stoploc.state_code', 'fare_basis_code', 'stoploc.airport_name', 'return_time.period_mod', 'return_time.period_of_day', 'return_date.today_relative', 'return_date.month_name', 'return_date.day_number', 'compartment', 'day_name', 'airport_code', 'stoploc.airport_code', 'flight'], 'atis_airfare': ['[PAD]', 'round_trip', 'fromloc.city_name', 'toloc.city_name', 'cost_relative', 'fare_amount', 'class_type', 'economy', 'airline_name', 'flight_mod', 'depart_time.time_relative', 'depart_time.time', 'arrive_date.month_name', 'arrive_date.day_number', 'airline_code', 'flight_number', 'stoploc.city_name', 'toloc.airport_name', 'depart_date.date_relative', 'depart_date.day_name', 'depart_date.month_name', 'depart_date.day_number', 'toloc.state_code', 'depart_time.period_of_day', 'flight_stop', 'fromloc.state_name', 'toloc.state_name', 'toloc.airport_code', 'aircraft_code', 'depart_date.year', 'arrive_time.time_relative', 'arrive_time.time', 'fromloc.airport_code', 'fromloc.airport_name', 'depart_date.today_relative', 'return_date.month_name', 'return_date.day_number', 'connect', 'meal', 'arrive_date.date_relative', 'arrive_date.day_name', 'or', 'depart_time.period_mod', 'flight_time', 'flight_days', 'fromloc.state_code'], 'atis_airline': ['[PAD]', 'fromloc.city_name', 'toloc.city_name', 'toloc.state_code', 'mod', 'depart_date.day_name', 'class_type', 'depart_date.today_relative', 'stoploc.city_name', 'aircraft_code', 'arrive_date.month_name', 'arrive_date.day_number', 'toloc.airport_name', 'fromloc.state_code', 'depart_time.period_of_day', 'airline_code', 'flight_number', 'depart_time.time_relative', 'depart_time.time', 'depart_date.month_name', 'depart_date.day_number', 'arrive_time.time', 'city_name', 'airport_name', 'flight_stop', 'arrive_time.period_of_day', 'fromloc.airport_code', 'airline_name', 'depart_date.date_relative', 'connect', 'flight_days', 'round_trip', 'cost_relative', 'fromloc.airport_name', 'depart_time.start_time', 'depart_time.end_time', 'toloc.state_name'], 'atis_ground_service': ['[PAD]', 'toloc.airport_name', 'city_name', 'fromloc.airport_name', 'toloc.city_name', 'state_code', 'transport_type', 'airport_name', 'fromloc.city_name', 'or', 'depart_date.date_relative', 'depart_date.day_name', 'time', 'depart_date.month_name', 'depart_date.day_number', 'today_relative', 'flight_time', 'state_name', 'period_of_day', 'time_relative', 'day_name', 'month_name', 'day_number', 'airport_code'], 'atis_others': ['[PAD]', 'depart_date.day_name', 'flight_stop', 'toloc.state_name', 'depart_time.period_of_day', 'city_name', 'depart_time.time', 'flight_mod', 'depart_date.today_relative', 'airport_name', 'fare_amount', 'toloc.state_code', 'arrive_date.day_number', 'arrive_time.time_relative', 'toloc.city_name', 'depart_time.time_relative', 'depart_date.day_number', 'depart_date.date_relative', 'cost_relative', 'fromloc.airport_name', 'toloc.airport_name', 'mod', 'fromloc.city_name', 'restriction_code', 'fare_basis_code', 'airline_name', 'depart_date.month_name', 'stoploc.city_name', 'arrive_date.day_name', 'fromloc.state_name', 'class_type', 'transport_type', 'aircraft_code', 'meal_description', 'return_date.date_relative', 'arrive_date.month_name', 'flight_time', 'or', 'arrive_time.time', 'economy', 'meal', 'flight_number', 'flight_days', 'state_code', 'toloc.airport_code', 'return_date.day_name', 'fromloc.airport_code', 'airport_code', 'round_trip', 'state_name', 'airline_code'], 'atis_abbreviation': ['[PAD]', 'fare_basis_code', 'airport_code', 'airline_code', 'meal', 'meal_code', 'restriction_code', 'airline_name', 'aircraft_code', 'class_type', 'days_code', 'mod', 'fromloc.city_name', 'toloc.city_name', 'booking_class'], 'playmusic': ['[PAD]', 'artist', 'album', 'service', 'music_item', 'track', 'year', 'sort', 'playlist', 'genre'], 'addtoplaylist': ['[PAD]', 'entity_name', 'playlist', 'artist', 'playlist_owner', 'music_item'], 'ratebook': ['[PAD]', 'object_select', 'object_type', 'rating_value', 'best_rating', 'object_part_of_series_type', 'rating_unit', 'object_name'], 'searchscreeningevent': ['[PAD]', 'movie_name', 'object_type', 'movie_type', 'spatial_relation', 'object_location_type', 'location_name', 'timerange'], 'bookrestaurant': ['[PAD]', 'party_size_number', 'state', 'restaurant_type', 'timerange', 'city', 'party_size_description', 'sort', 'served_dish', 'spatial_relation', 'poi', 'restaurant_name', 'country', 'cuisine', 'facility'], 'getweather': ['[PAD]', 'city', 'state', 'timerange', 'geographic_poi', 'spatial_relation', 'current_location', 'country', 'condition_temperature', 'condition_description'], 'searchcreativework': ['[PAD]', 'object_type', 'object_name']}
******Loading 123 slots for training and testing ******
End2endSLUTagger(
  (bert): BertEmbedding(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30522, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (seq_encoder): LSTM(
    (lstm): LSTM(768, 384, batch_first=True, bidirectional=True)
  )
  (bound_embedding): Embedding(4, 10, padding_idx=0)
  (hidden2boundary): Linear(in_features=768, out_features=4, bias=True)
  (tag_crf): CRF(num_tags=4)
  (hidden_proj): Linear(in_features=778, out_features=768, bias=True)
  (tokencl): TokenCL(
    (output_embedder_mu): Sequential(
      (0): ReLU()
      (1): Linear(in_features=768, out_features=128, bias=True)
    )
    (output_embedder_sigma): Sequential(
      (0): ReLU()
      (1): Linear(in_features=768, out_features=128, bias=True)
    )
  )
  (ce_loss): LabelSmoothingCrossEntropyLoss(
    (log_softmax): LogSoftmax(dim=-1)
  )
  (label_adapter): Sequential(
    (0): Linear(in_features=768, out_features=192, bias=False)
    (1): GELU()
    (2): Linear(in_features=192, out_features=768, bias=False)
  )
)
Training 114M trainable parameters...
Load bert vocabulary finished !!!
Traceback (most recent call last):
  File "f2xDataset.py", line 425, in <module>
    prf = trainer.train()
  File "f2xDataset.py", line 242, in train
    train_loss = self.train_epoch(ep)
  File "f2xDataset.py", line 173, in train_epoch
    loss, dict = self.slu_model(batch.bert_inputs,
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sml/test_folder/zero-shot-slu/model/e2e_bert_f2tagger.py", line 223, in forward
    bert_repr = self.bert(*bert_inp)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sml/test_folder/zero-shot-slu/modules/bertembedding.py", line 64, in forward
    last_enc_out, _, all_enc_outs = self.bert(bert_ids, token_type_ids=segments, attention_mask=bert_mask, return_dict=False)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 996, in forward
    encoder_outputs = self.encoder(
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 585, in forward
    layer_outputs = layer_module(
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 472, in forward
    self_attention_outputs = self.attention(
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 402, in forward
    self_outputs = self.self(
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/transformers/models/bert/modeling_bert.py", line 334, in forward
    attention_probs = self.dropout(attention_probs)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/modules/dropout.py", line 58, in forward
    return F.dropout(input, self.p, self.training, self.inplace)
  File "/home/sml/miniconda3/envs/nlp/lib/python3.8/site-packages/torch/nn/functional.py", line 1076, in dropout
    return _VF.dropout_(input, p, training) if inplace else _VF.dropout(input, p, training)
RuntimeError: CUDA out of memory. Tried to allocate 12.00 MiB (GPU 1; 23.70 GiB total capacity; 1.22 GiB already allocated; 13.56 MiB free; 1.29 GiB reserved in total by PyTorch)
